<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 24 Mar 2016 17:25:32 +0000</pubDate>
    <lastBuildDate>Thu, 24 Mar 2016 17:25:32 +0000</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>307 Temporary Redirect</title>
        <description>I&#39;m trying out &lt;a href=&quot;https://jekyllrb.com/&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt; in &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot;&gt;GitHub pages&lt;/a&gt; at&amp;nbsp;&lt;a href=&quot;http://sergiofagostinho.github.io/&quot;&gt;http://sergiofagostinho.github.io/&lt;/a&gt;.</description>
        <pubDate>Thu, 24 Mar 2016 16:50:00 +0000</pubDate>
        <link>http://yourdomain.com/2016/03/24/307-temporary-redirect.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2016/03/24/307-temporary-redirect.html</guid>
        
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 24 Mar 2016 15:55:06 +0000</pubDate>
        <link>http://yourdomain.com/jekyll/update/2016/03/24/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2016/03/24/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>The entropy of logging</title>
        <description>&lt;em&gt;A couple of weeks ago, my colleague António Vieira made an internal presentation called the “The entropy of logging”. In this post I share the main points of the presentation and my thoughts on the subject.&lt;/em&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Logging&lt;/h3&gt;&lt;div&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;&quot;Event logs record events taking place in the execution of a system in order to provide an audit trail that can be used to understand the activity of the system and to diagnose problems. They are essential to understand the activities of complex systems,&amp;nbsp;particularly&amp;nbsp;in the case&amp;nbsp;of applications with little user interaction (such as server applications).&quot; - &lt;a href=&quot;http://en.wikipedia.org/wiki/Logfile#Event_logs&quot; target=&quot;_blank&quot;&gt;Wikipedia&lt;/a&gt;&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;We all know what logging is but how to do it right?&lt;/blockquote&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&amp;nbsp;Some guidelines might help…&lt;/blockquote&gt;&lt;h3&gt;&amp;nbsp;Relevant&lt;/h3&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;Captain&#39;s Log, Stardate 43125.8. We have entered a spectacular binary star system in the Kavis Alpha sector on a most critical mission of astrophysical research. Our eminent guest, Dr. Paul Stubbs, will attempt to study the decay of neutronium expelled at relativistic speeds from a massive stellar explosion which will occur here in a matter of hours.&lt;/i&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;h3&gt;Irrelevant&lt;/h3&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;i&gt;Captain&#39;s Log, Stardate 43125.8. Today I had baked beans for lunch. Lt Commander Data didn’t understand my irony. Lt Commander La Forge has the feeling unwell, probably the galactic flu.&lt;/i&gt;&lt;/blockquote&gt;&lt;div&gt;&lt;h3&gt;Levels&lt;/h3&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://1.bp.blogspot.com/-cQepPW4hZZU/VWcGKGwzeFI/AAAAAAAAJ24/tV8Xpb1W3tk/s1600/levels.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;233&quot; src=&quot;http://1.bp.blogspot.com/-cQepPW4hZZU/VWcGKGwzeFI/AAAAAAAAJ24/tV8Xpb1W3tk/s640/levels.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;7 guidelines&lt;/h3&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;&lt;ol&gt;&lt;li&gt;Log &lt;i&gt;relevant&lt;/i&gt; events&lt;/li&gt;&lt;li&gt;Log the&amp;nbsp;&lt;i&gt;unpredictable&lt;/i&gt;&lt;/li&gt;&lt;li&gt;&lt;i&gt;1&lt;/i&gt; event = &lt;i&gt;1&lt;/i&gt; log line&lt;/li&gt;&lt;li&gt;Log the &lt;i&gt;boundaries&lt;/i&gt; of the application&lt;/li&gt;&lt;li&gt;Consistent and &lt;i&gt;parsable&lt;/i&gt;&lt;/li&gt;&lt;li&gt;End-to-end &lt;i&gt;traceability&lt;/i&gt;&lt;/li&gt;&lt;li&gt;Protect &lt;i&gt;privacy&lt;/i&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/blockquote&gt;&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;h3&gt;Should libraries include logging?&lt;/h3&gt;&lt;blockquote class=&quot;tr_bq&quot;&gt;No! Logging is an application level concern&lt;br /&gt;Libraries should expose all the relevant state as return values, exceptions or event listeners.&lt;br /&gt;If you really need events on your library keep it very simple and plugable.&lt;/blockquote&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3&gt;My (Sergio) conclusion&lt;/h3&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Logging is something that many of us, professional developers, take for granted. In every project I&#39;ve worked, as soon as deploy an application to an environment, things start to fail (which is expected), but it’s rare that the existing log is enough to quickly debug the problem. Most often, critical information is missing, and the existing log entries are mostly just clutter.&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Based on my experience, all of these guidelines are valid. The ones I hadn&#39;t applied in the past were point 3, as well as point 5 and 7, but simply because they didn&#39;t apply to my application&#39;s domain.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Having one log entry per event may seem strange at first because it seems a strong constrain, but I&#39;ve recently have been applying it, and it has actually made the code cleaner. Basically, each domain event will produce a single log entry in case of success (INFO), or in the case of failure (ERROR)To me it feels the correct approach, particularly for a &lt;i&gt;Domain Driven Design&lt;/i&gt; approach (although I haven&#39;t been using it currently), as you should have one log entry per domain event. Having that said, this shouldn&#39;t be applied &lt;i&gt;too&lt;/i&gt; literally: it&#39;s still OK to have a random log entry at the DEBUG level, just not at INFO and ERROR (you are filtering DEBUG entries in production, right? :))&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;By applying the single log entry guideline, you&#39;ll probably have to log a &lt;i&gt;lot&lt;/i&gt; of information, which leads to the &lt;i&gt;parsable&lt;/i&gt; guideline. In our current development, we&#39;ve found that the best approach is to log it as JSON. We are not constraining the event to an actual schema, although we try to be consistent. In practise, this means we are using &lt;a href=&quot;http://www.newtonsoft.com/json&quot;&gt;Json.NET&lt;/a&gt; to serialize a &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dd264741.aspx&quot; target=&quot;_blank&quot;&gt;dynamic&lt;/a&gt; object (in .NET), or &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt; to serialize an &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/HashMap.html&quot; target=&quot;_blank&quot;&gt;HashMap&lt;/a&gt; object. Log parsing tools (such as &lt;a href=&quot;http://logstash.net/&quot; target=&quot;_blank&quot;&gt;logstash&lt;/a&gt;) should have any problem with this.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Regarding privacy, we have been very careful. We try to use &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/system.security.securestring(v=vs.110).aspx&quot; target=&quot;_blank&quot;&gt;SecureString&lt;/a&gt; (in .NET) or &lt;a href=&quot;http://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords&quot; target=&quot;_blank&quot;&gt;char[]&lt;/a&gt; (in Java) types for holding passwords in memory, but for the remaining data the best approach is to remove sensitive fields from serialization (preferably in a declaratively form, to be clear about this in the code). When the sensitive information &lt;i&gt;is relevant &lt;/i&gt;for logging issues, the standard approach is to log the first N characters of the text, and add place-holders (such as the asterisk character) to the remaining text.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;Finally, regarding on the point of not logging on libraries, I can&#39;t say I totally agree with António. I mean, I agree if the library is a thin layer, such as in an &lt;i&gt;infrastructure&lt;/i&gt;&amp;nbsp;layer library; but this may harder to implement if the library is complex, such as a &lt;i&gt;domain&lt;/i&gt;&amp;nbsp;layer library (as I have implemented in the past). What I can add is that we should avoid logging in libraries if we possible; if not,we should use a logging framework facade, such as &lt;a href=&quot;http://netcommon.sourceforge.net/&quot; target=&quot;_blank&quot;&gt;CommonLogging&lt;/a&gt; in .NET or &lt;a href=&quot;http://www.slf4j.org/&quot; target=&quot;_blank&quot;&gt;SLF4J&lt;/a&gt; in Java, to reduce the change of friction.&lt;/div&gt;&lt;br /&gt;&lt;i&gt;Thanks to &lt;a href=&quot;https://pt.linkedin.com/in/tozevv&quot;&gt;António Vieira&lt;/a&gt; for the interesting discussion and allowing me to share some of the content of his presentation.&lt;/i&gt;&lt;/div&gt;</description>
        <pubDate>Wed, 17 Jun 2015 21:18:00 +0100</pubDate>
        <link>http://yourdomain.com/2015/06/17/the-entropy-of-logging.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/06/17/the-entropy-of-logging.html</guid>
        
        <category>Java</category>
        
        <category>.Net</category>
        
        <category>Domain Driven Design</category>
        
        <category>logging</category>
        
        <category>micro-services</category>
        
        
      </item>
    
      <item>
        <title>Checked exceptions in Java</title>
        <description>&lt;i&gt;In this post I describe some issues I had with checked exceptions in Java, and my current approach to handle them.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;When I developed in Java non-professionally some years ago, I found the checked exception mechanism interesting. The possibility to add to a method&#39;s contract the exceptions it throws, and therefore enforce that they are handled at compile seemed a good idea. (&lt;a href=&quot;http://sergioagostinho-dev.blogspot.pt/2007/06/c-first-look.html&quot; target=&quot;_blank&quot;&gt;I actually missed them when I first started developing in C#&lt;/a&gt;). Now that I a more experienced developer and that I try to apply the SOLID principles, I&#39;m not so sure.&lt;/div&gt;&lt;br /&gt;&lt;h3&gt;Dependency Inversion Principle&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;When you are applying the &lt;/span&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_inversion_principle&quot; style=&quot;text-align: justify;&quot; target=&quot;_blank&quot;&gt;Dependency Inversion Principle&lt;/a&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;, classes depend on interfaces, not the actual implementations. Let&#39;s say you have a &lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace; text-align: justify;&quot;&gt;Serializer&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt; interface with a&lt;/span&gt;&lt;span style=&quot;font-family: inherit; text-align: justify;&quot;&gt; single&lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace; text-align: justify;&quot;&gt; serialize()&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt; method and &lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace; text-align: justify;&quot;&gt;SerializerImpl&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;class. So if &lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace; text-align: justify;&quot;&gt;SerializerImpl&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt; has a &lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace; text-align: justify;&quot;&gt;serialize()&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt; implementation which throws an exception, then &lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace; text-align: justify;&quot;&gt;Serializer&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt; must also declare it throws that exception on &lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace; text-align: justify;&quot;&gt;serialize()&lt;/span&gt;&lt;span style=&quot;text-align: justify;&quot;&gt;. It seems to me a bit awkward that the interface must know which exceptions the actual implementation throws, but that doesn&#39;t seem to break any SOLID principle too much, so I can live with that.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;What happens when you need to have must implementations of that class? Let&#39;s say you need to implement an XML, a JSON and a Protobuff serializer. Each &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;serialize()&lt;/span&gt; implementation will probably need to declare the exceptions it throws. For simplicity sake, let&#39;s say&amp;nbsp;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;XmlSerializer&lt;/span&gt; throws &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;XmlException&lt;/span&gt;, &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;JsonSerializer&lt;/span&gt; throws &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;JsonException&lt;/span&gt;, and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;ProtobuffException&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;&amp;nbsp;(in reality, depending on the framework you use in each of the implementations that may need to throw more than on).&lt;/span&gt; But then, the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Serializer &lt;/span&gt;interface must also declare it throws the exceptions each implementation throws, which mean that each implementation must know all the exceptions the other implementations throw. That means that all the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Serializer&lt;/span&gt; implementation are coupled with each other, and the interface is coupled with each one of the implementations. This definitely doesn&#39;t seem right!&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;So, my approach was to introduce a new exception: &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SerializerException&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt; and change the &lt;/span&gt;&lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;serialize()&lt;/span&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt; method to throw only this exception.&amp;nbsp;&lt;/span&gt;The purpose of this exception is to wrap the actual exceptions thrown by the frameworks used for each of the serialization methods. It adds the extra work of having to define a new exception, but it decouples the Serializer from all the implementations, and decouples each implementation from all the others.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-WOclcb9onhI/VV0L23zI_WI/AAAAAAAAJ1o/Pv6W9u1wmaU/s1600/diagram-3464475650202648769.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;222&quot; src=&quot;http://3.bp.blogspot.com/-WOclcb9onhI/VV0L23zI_WI/AAAAAAAAJ1o/Pv6W9u1wmaU/s640/diagram-3464475650202648769.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style=&quot;text-align: justify;&quot;&gt;Checked or unchecked?&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;While this approach seems good, it&#39;s only elegant for simple applications, that is, if your application entry point invokes the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Serializer&lt;/span&gt;. If you have a non-trivial application with a more complex dependency tree, and you just want to handle exceptions at the high-level, then it becomes cumbersome. Let&#39;s say you entry point class invokes a method &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;foobar()&lt;/span&gt; in class &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Foobar&lt;/span&gt;, which invokes a method &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;foo()&lt;/span&gt; in class &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Foo&lt;/span&gt;, which then invokes a method bar() in class Bar, which finally invokes serialize(). All these methods: &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;foo()&lt;/span&gt;, &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;bar()&lt;/span&gt; and &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;foobar()&lt;/span&gt; must declare that they throw &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SerializerException&lt;/span&gt;, regardless of their responsibility. Also, if you have unit tests for these classes, then each test method must also declare it throws &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SerializerException&lt;/span&gt;.&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;My approach was to make &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;SerializerException&lt;/span&gt; extend &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/RuntimeException.html&quot; target=&quot;_blank&quot;&gt;RuntimeException&lt;/a&gt; instead of the (checked) &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/lang/Exception.html&quot; target=&quot;_blank&quot;&gt;Exception&lt;/a&gt;. This means that the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;Serializer&lt;/span&gt; interface (and any implementation) no longer need to declare it throws any exception, so the code becomes much simpler. However, I did document that the method throws the exception using the &lt;span style=&quot;font-family: Courier New, Courier, monospace;&quot;&gt;@throws&lt;/span&gt; javadoc comment. (This is pretty much the approach used in C#).&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-rSnrnC2MKRw/VV0MYs-p33I/AAAAAAAAJ1w/rT2akAQPDE0/s1600/diagram-6053943533270054517.png&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;222&quot; src=&quot;http://4.bp.blogspot.com/-rSnrnC2MKRw/VV0MYs-p33I/AAAAAAAAJ1w/rT2akAQPDE0/s640/diagram-6053943533270054517.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;As a I did this, I did do some research. Oracle&#39;s documentation on the matter (&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/exceptions/runtime.html&quot; target=&quot;_blank&quot;&gt;Unchecked exceptions - the controversy&lt;/a&gt;) didn&#39;t convince me, and lot of people&amp;nbsp;&lt;a href=&quot;https://ourcraft.wordpress.com/2009/01/15/checked-exceptions-good-or-bad/&quot; target=&quot;_blank&quot;&gt;shared my opinion&lt;/a&gt;, but none of them was quite an authority. Then I found Bruce Eckel&#39;s book &quot;&lt;a href=&quot;http://www.amazon.co.uk/Thinking-Java-Bruce-Eckel/dp/0131872486&quot; target=&quot;_blank&quot;&gt;Thinking in Java&lt;/a&gt;&quot; (4th edition). Namely in Chapter 9, section &quot;Perspectives&quot;, page 347, he has a &lt;a href=&quot;https://books.google.co.uk/books?id=Ql6QgWf6i7cC&amp;amp;pg=PA414&amp;amp;dq=martin+fowler+java+checked+exceptions&amp;amp;hl=en&amp;amp;sa=X&amp;amp;ei=xwddVajCG8vd7QaNtYOIDQ&amp;amp;ved=0CCEQ6AEwAA#v=onepage&amp;amp;q=martin%20fowler%20java%20checked%20exceptions&amp;amp;f=false&quot; target=&quot;_blank&quot;&gt;similar opinion to mine&lt;/a&gt;&amp;nbsp;(and so does Martin Fowler).&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;h3 style=&quot;text-align: justify;&quot;&gt;Conclusion&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;In my opinion, avoid checked exceptions in Java unless you are doing a trivial application. If you need to work with checked exceptions, wrap them in your own unchecked exception. The extra work needed outweighs the clarity and decoupling you obtain in your code base. Nevertheless, documenting these exceptions in javadocs and properly (unit) testing your code is also necessary,&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
        <pubDate>Wed, 20 May 2015 23:39:00 +0100</pubDate>
        <link>http://yourdomain.com/2015/05/20/dependency-inversion-principle-and.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/05/20/dependency-inversion-principle-and.html</guid>
        
        <category>Java</category>
        
        <category>C#</category>
        
        <category>SOLID</category>
        
        <category>Unit Testing</category>
        
        
      </item>
    
      <item>
        <title>My .NET contrib project on github</title>
        <description>I&#39;ve decided to share on GitHub a &lt;a href=&quot;https://github.com/sergiofagostinho/dotnet-contrib&quot; target=&quot;_blank&quot;&gt;.NET contrib&lt;/a&gt; library.</description>
        <pubDate>Wed, 13 May 2015 22:32:00 +0100</pubDate>
        <link>http://yourdomain.com/2015/05/13/my-net-contrib-project-on-github.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/05/13/my-net-contrib-project-on-github.html</guid>
        
        <category>.Net</category>
        
        
      </item>
    
      <item>
        <title>My Java contrib project on github</title>
        <description>I&#39;ve decided to share on GitHub a &lt;a href=&quot;https://github.com/sergiofagostinho/java-contrib&quot; target=&quot;_blank&quot;&gt;Java contrib&lt;/a&gt; library.</description>
        <pubDate>Wed, 29 Apr 2015 20:19:00 +0100</pubDate>
        <link>http://yourdomain.com/2015/04/29/my-java-contrib-project-on-github.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/04/29/my-java-contrib-project-on-github.html</guid>
        
        <category>Java</category>
        
        
      </item>
    
      <item>
        <title>Hiding protobuffer generated code in a Java library</title>
        <description>&lt;i&gt;In this post I describe how to hide Protocol Buffer&#39;s generated code in a Java library.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;Recently, I was developing a Java library that used Google&#39;s &lt;a href=&quot;https://developers.google.com/protocol-buffers/docs/javatutorial&quot; target=&quot;_blank&quot;&gt;Protocol Buffers&lt;/a&gt; as a serialization format. As part of the design of the library, we only expose some classes, the remaining implementation has&amp;nbsp;&lt;a href=&quot;https://docs.oracle.com/javase/tutorial/java/javaOO/accesscontrol.html&quot; target=&quot;_blank&quot;&gt;package-private&lt;/a&gt; visibility. In particular, we de not want to exposed the generated object, as it was mapped into a domain class, but the &lt;span style=&quot;font-family: Arial, Helvetica, sans-serif;&quot;&gt;protoc.exe&lt;/span&gt; executable produces public code. The solution was to perform a post-processing step invoking &quot;protoc&quot; to remove all public definitions used the &lt;a href=&quot;http://unixhelp.ed.ac.uk/CGI/man-cgi?sed&quot; target=&quot;_blank&quot;&gt;sed&lt;/a&gt; command (if you are on Windows, you should have this command available by installing &lt;a href=&quot;https://msysgit.github.io/&quot; target=&quot;_blank&quot;&gt;Git Bash&lt;/a&gt;). Here is an example of a batch file to this on Windows:&lt;br /&gt;&lt;br /&gt;&lt;pre&gt;@echo off&lt;br /&gt;:: compiling ProtoBuff definition&lt;br /&gt;protoc.exe --java_out=java\ java\pt\invisibleobjects\MyObject.proto&lt;br /&gt;:: setting package-private class visibility for classes&lt;br /&gt;sed -i &#39;s/^public final class/final class/&#39; java\pt\invisibleobjects\MyObject.java&lt;br /&gt;:: setting package-private class visibility for static classes&lt;br /&gt;sed -i &#39;s/^public static final class/static final class/&#39; java\pt\invisibleobjects\MyObject.java&lt;br /&gt;:: setting package-private class visibility for enums&lt;br /&gt;sed -i &#39;s/^public enum/enum/&#39; java\pt\invisibleobjects\MyObject.java&lt;br /&gt;&lt;/pre&gt;</description>
        <pubDate>Mon, 27 Apr 2015 13:23:00 +0100</pubDate>
        <link>http://yourdomain.com/2015/04/27/hiding-protobuffer-generated-code-in.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/04/27/hiding-protobuffer-generated-code-in.html</guid>
        
        <category>Java</category>
        
        <category>Batch file</category>
        
        <category>Protocol Buffers</category>
        
        
      </item>
    
      <item>
        <title>Back to the Future</title>
        <description>I&#39;ve recently decided to close my old personal blog. However, I picked all the software development related posts (wrote somewhere between 2007 and 2008) and imported them into this blog.</description>
        <pubDate>Mon, 27 Apr 2015 09:00:00 +0100</pubDate>
        <link>http://yourdomain.com/2015/04/27/back-to-future.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/04/27/back-to-future.html</guid>
        
        
      </item>
    
      <item>
        <title>return java;</title>
        <description>&lt;i&gt;As mentioned&amp;nbsp;previously&amp;nbsp;in my blog, I&#39;m back to Java development. And it&#39;s been a while since my &lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.131.4053&amp;amp;rep=rep1&amp;amp;type=pdf&quot; target=&quot;_blank&quot;&gt;MSc&lt;/a&gt; &lt;a href=&quot;https://eclipse.org/aspectj/&quot; target=&quot;_blank&quot;&gt;AspectJ&lt;/a&gt; prototype. So how does a .NET developer survive in a Java world?&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;First, read this article:&amp;nbsp;&lt;a href=&quot;http://www.jamesward.com/2014/12/03/java-doesnt-suck-youre-just-using-it-wrong&quot; target=&quot;_blank&quot;&gt;Java Doesn’t Suck – You’re Just Using it Wrong&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Second, if you are lucky enough, try to lobby for using a modern Java stack. We are a couple of interesting technologies:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.dropwizard.io/&quot; target=&quot;_blank&quot;&gt;DropWizard&lt;/a&gt;: a framework that glues a couple of interesting technologies, it&#39;s a nice starting point. Most of these technologies are mentioned next.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://eclipse.org/jetty/&quot; target=&quot;_blank&quot;&gt;Jetty&lt;/a&gt;: an HTTP web server.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://jersey.java.net/&quot; target=&quot;_blank&quot;&gt;Jersey&lt;/a&gt;: a RESTful web service framework.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/FasterXML/jackson&quot; target=&quot;_blank&quot;&gt;Jackson&lt;/a&gt;: a JSON library. Similar to &lt;a href=&quot;http://www.newtonsoft.com/json&quot;&gt;Json.NET&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://logback.qos.ch/&quot;&gt;Logback&lt;/a&gt; and &lt;a href=&quot;http://www.slf4j.org/&quot;&gt;slf4j&lt;/a&gt;: a logging library and logging facade. Similar to &lt;a href=&quot;http://logging.apache.org/log4net/&quot;&gt;log4net&lt;/a&gt; and &lt;a href=&quot;http://netcommon.sourceforge.net/&quot;&gt;CommonLogging&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://hc.apache.org/httpcomponents-client-ga/&quot;&gt;Apache HTTP Client&lt;/a&gt;: an HTTP client library.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.joda.org/joda-time/&quot;&gt;Joda Time&lt;/a&gt;: a library for correctly handling date/time values. Similar to &lt;a href=&quot;http://nodatime.org/&quot;&gt;Noda Time&lt;/a&gt; (actually, Noda started as a port of Joda).&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://gradle.org/&quot; target=&quot;_blank&quot;&gt;Gradle&lt;/a&gt;: a build automation tool. Similar to &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/0k6kkbsd.aspx&quot;&gt;MSBuild&lt;/a&gt;. Gradle is able to to use &lt;a href=&quot;https://maven.apache.org/&quot;&gt;Maven&lt;/a&gt; packages, which in turn are similar to &lt;a href=&quot;http://www.nuget.org/&quot;&gt;NuGet&lt;/a&gt; packages.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://junit.org/&quot; target=&quot;_blank&quot;&gt;JUnit&lt;/a&gt;&amp;nbsp;+ &lt;a href=&quot;https://github.com/Pragmatists/junitparams&quot;&gt;JUnitParams&lt;/a&gt;: a unit testing framework and an extension that makes &lt;a href=&quot;http://www.nunit.org/index.php?p=testCase&amp;amp;r=2.5&quot; target=&quot;_blank&quot;&gt;test case&lt;/a&gt; scenarios simple to use.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/mockito/mockito&quot;&gt;Mockito&lt;/a&gt;: a mocking library. Similar to &lt;a href=&quot;https://github.com/Moq/moq4&quot;&gt;Moq&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://joel-costigliola.github.io/assertj/&quot;&gt;AssertJ&lt;/a&gt;: a fluent assertion library. Similar to &lt;a href=&quot;https://github.com/dennisdoomen/fluentassertions&quot;&gt;FluentAssertions&lt;/a&gt;.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://wiremock.org/&quot;&gt;WireMock&lt;/a&gt;: an HTTP mocking library.&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/federecio/dropwizard-swagger&quot;&gt;Swagger&lt;/a&gt;: if you develop REST APIs in .NET, you should already now it ;)&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Finally, a good IDE is also important. The &lt;a href=&quot;https://eclipse.org/ide/&quot; target=&quot;_blank&quot;&gt;Eclipse IDE&lt;/a&gt; hasn&#39;t changed much over the years, and so I&#39;ve been using &lt;a href=&quot;https://www.jetbrains.com/idea/&quot; target=&quot;_blank&quot;&gt;IntelliJ&lt;/a&gt;&amp;nbsp;IDEA, which is quite better (not surprising, since it&#39;s developed by JetBrains, the same people that developed ReSharper). There is a nice Community Edition, which is free. As a bonus, if you want to use the same short-cuts as ReSharper, you can get them &lt;a href=&quot;https://github.com/hhariri/Tidbits/blob/master/resharper.jar&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/div&gt;</description>
        <pubDate>Sun, 19 Apr 2015 19:36:00 +0100</pubDate>
        <link>http://yourdomain.com/2015/04/19/return-java.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/04/19/return-java.html</guid>
        
        <category>Java</category>
        
        <category>IntelliJ</category>
        
        <category>ReSharper</category>
        
        <category>Eclipse</category>
        
        
      </item>
    
      <item>
        <title>Design by Contract for Java on github</title>
        <description>&lt;i&gt;I&#39;ve decided to share on GitHub the &lt;a href=&quot;https://github.com/sergiofagostinho/dbc4j&quot; target=&quot;_blank&quot;&gt;Design by Contract for Java (DbC4J)&lt;/a&gt; library. This was a prototype I developed back in 2007 for my Master Thesis, &quot;An Aspect Oriented Infrastructure for Design by Contract in Java&quot;.&lt;/i&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-uOeOou9ejds/VTPtRrVYAKI/AAAAAAAAJ0A/2Oh-_4FFc8Y/s1600/thesis-diagram.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://4.bp.blogspot.com/-uOeOou9ejds/VTPtRrVYAKI/AAAAAAAAJ0A/2Oh-_4FFc8Y/s1600/thesis-diagram.jpg&quot; height=&quot;265&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;The DbC4J library allowed enforcing contract clauses using regular Java methods via naming conventions. Internally, it was implemented using &lt;a href=&quot;https://eclipse.org/aspectj/&quot; target=&quot;_blank&quot;&gt;AspectJ&lt;/a&gt;, the original Aspect-Oriented Programming (AOP) framework, and a lot reflection. The library has been available on-line since 2007, but the since the research group I was part of closed their website, it has been unavailable. Currently the source code available at GitHub is the last release from 2007, unchanged, so I&#39;m not sure how the code compiles under the latest versions of Java/AspectJ (this was originally implemented under JDK/AspectJ/AJDT 5 with Eclipse). Also available on GitHub is my &lt;a href=&quot;https://github.com/sergiofagostinho/dbc4j/blob/master/docs/AnAspectOrientedInfrastructureForDesignByContractInJava.pdf&quot; target=&quot;_blank&quot;&gt;Master Thesis dissertation&lt;/a&gt;, in case anyone in interested in the research underlying the prototype.&lt;/div&gt;</description>
        <pubDate>Sun, 19 Apr 2015 19:15:00 +0100</pubDate>
        <link>http://yourdomain.com/2015/04/19/design-by-contract-for-java-on-github.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/04/19/design-by-contract-for-java-on-github.html</guid>
        
        <category>Java</category>
        
        <category>AOP</category>
        
        <category>Design by Contract</category>
        
        <category>AspectJ</category>
        
        
      </item>
    
  </channel>
</rss>
